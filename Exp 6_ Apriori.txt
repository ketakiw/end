K.J.Somaiya Institute of Engineering and Information Technology, Sion(E),Mumbai-400022


import collections
import itertools


items = collections.OrderedDict()
item_list = []
# transactions = []
n = int(input("Enter no. of items: "))


for i in range(0,n):
        item = input("Input item %d: " % (i+1))
        item_list.append(item)
        items[item] = 0


n = int(input("Enter no. of transactions: "))
print("**PRESS ENTER TO MOVE TO THE NEXT TRANSACTION**")


transactions = [[] for i in range(0,n)]


for i in range(0,n):
        print("Enter t%d: " % (i+1))
        while True:
                item = input()
                if not item:
                        break
                transactions[i].append(item)
                items[item] += 1


print(item_list)
print(items)
print(transactions)                


# item_list = ["A","B","C","D","E","F"]
# items = {"A":3,"B":2,"C":2,"D":1,"E":1,"F":1}
# transactions = [["A","B","C"],["A","C"],["A","D"],["B","F","E"]]


min_support = float(input("Enter min support in %: "))
min_confidence = int(input("Enter min confidence in %: "))


min_support = (min_support/100) * n
print(min_support)


combination = list(itertools.combinations(list(item_list),1))
l = [[] for i in range(0,6)]


for i in range(0,6):
        # print(list(itertools.combinations(list(items.keys()),i+1)))
        # combination = list(itertools.combinations(list(items.keys()),i+1))
        print("*******************")
        for j in combination:
                j = frozenset(j)
                count = 0
                print(j,end="  ")
                # for k in j:
                for t in transactions:
                        if j <= frozenset(t):
                                count += 1


                print(count)


                if(count < min_support and i == 0):
                        item_list.remove(list(j)[0])
                        print(item_list)
                if(count >= min_support):
                        d = dict({j:count})
                        l[i].append(d)


                print(l)


        combination = list(itertools.combinations(list(item_list),i+2))


        if not l[i]:
                index = i - 1
                break
        # else:
        #         continue
        # break
for i in l[index]:
        print("***********")
        rule_count = 0
        rule = list(list(i.keys())[0])
        for t in transactions:
                if set(rule) <= set(t):
                        rule_count += 1
        print(count)
        for j in range(1,len(rule)):
                combination = list(itertools.combinations(rule,j))
                # print(combination)
                for k in combination:
                        count = 0
                        print("For rule {0} -> {1}: ".format(set(k),set(rule)-set(k)),end="")
                        for t in transactions:
                                if set(k) <= set(t):
                                        count += 1
                        confidence = (rule_count/count) * 100
                        print(confidence,end="  ")


                        if(confidence < min_confidence):
                                print("RULE NOT SELECTED")
                        else:
                                print("***RULE SELECTED***")


OUTPUT:


d50101@d50101-ThinkCentre-M720t:~$ python3 apriori.py
Enter no. of items: 5
Input item 1: A
Input item 2: B
Input item 3: C
Input item 4: D
Input item 5: E
Enter no. of transactions: 4
**PRESS ENTER TO MOVE TO THE NEXT TRANSACTION**
Enter t1: 
A
B
C
D
E


Enter t2: 
B
C
D


Enter t3: 
C
D
E


Enter t4: 
B
C
D
E


['A', 'B', 'C', 'D', 'E']
OrderedDict([('A', 1), ('B', 3), ('C', 4), ('D', 4), ('E', 3)])
[['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D'], ['C', 'D', 'E'], ['B', 'C', 'D', 'E']]
Enter min support in %: 50
Enter min confidence in %: 70
2.0
*******************
frozenset({'A'})  1
['B', 'C', 'D', 'E']
[[], [], [], [], [], []]
frozenset({'B'})  3
[[{frozenset({'B'}): 3}], [], [], [], [], []]
frozenset({'C'})  4
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}], [], [], [], [], []]
frozenset({'D'})  4
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}], [], [], [], [], []]
frozenset({'E'})  3
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [], [], [], [], []]
*******************
frozenset({'C', 'B'})  3
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}], [], [], [], []]
frozenset({'D', 'B'})  3
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}], [], [], [], []]
frozenset({'E', 'B'})  2
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}], [], [], [], []]
frozenset({'C', 'D'})  4
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}], [], [], [], []]
frozenset({'E', 'C'})  3
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}, {frozenset({'E', 'C'}): 3}], [], [], [], []]
frozenset({'E', 'D'})  3
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}, {frozenset({'E', 'C'}): 3}, {frozenset({'E', 'D'}): 3}], [], [], [], []]
*******************
frozenset({'D', 'C', 'B'})  3
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}, {frozenset({'E', 'C'}): 3}, {frozenset({'E', 'D'}): 3}], [{frozenset({'D', 'C', 'B'}): 3}], [], [], []]
frozenset({'E', 'C', 'B'})  2
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}, {frozenset({'E', 'C'}): 3}, {frozenset({'E', 'D'}): 3}], [{frozenset({'D', 'C', 'B'}): 3}, {frozenset({'E', 'C', 'B'}): 2}], [], [], []]
frozenset({'E', 'D', 'B'})  2
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}, {frozenset({'E', 'C'}): 3}, {frozenset({'E', 'D'}): 3}], [{frozenset({'D', 'C', 'B'}): 3}, {frozenset({'E', 'C', 'B'}): 2}, {frozenset({'E', 'D', 'B'}): 2}], [], [], []]
frozenset({'E', 'C', 'D'})  3
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}, {frozenset({'E', 'C'}): 3}, {frozenset({'E', 'D'}): 3}], [{frozenset({'D', 'C', 'B'}): 3}, {frozenset({'E', 'C', 'B'}): 2}, {frozenset({'E', 'D', 'B'}): 2}, {frozenset({'E', 'C', 'D'}): 3}], [], [], []]
*******************
frozenset({'D', 'C', 'E', 'B'})  2
[[{frozenset({'B'}): 3}, {frozenset({'C'}): 4}, {frozenset({'D'}): 4}, {frozenset({'E'}): 3}], [{frozenset({'C', 'B'}): 3}, {frozenset({'D', 'B'}): 3}, {frozenset({'E', 'B'}): 2}, {frozenset({'C', 'D'}): 4}, {frozenset({'E', 'C'}): 3}, {frozenset({'E', 'D'}): 3}], [{frozenset({'D', 'C', 'B'}): 3}, {frozenset({'E', 'C', 'B'}): 2}, {frozenset({'E', 'D', 'B'}): 2}, {frozenset({'E', 'C', 'D'}): 3}], [{frozenset({'D', 'C', 'E', 'B'}): 2}], [], []]
*******************
***********
2
For rule {'D'} -> {'E', 'C', 'B'}: 50.0  RULE NOT SELECTED
For rule {'C'} -> {'E', 'D', 'B'}: 50.0  RULE NOT SELECTED
For rule {'E'} -> {'D', 'C', 'B'}: 66.66666666666666  RULE NOT SELECTED
For rule {'B'} -> {'E', 'D', 'C'}: 66.66666666666666  RULE NOT SELECTED
For rule {'D', 'C'} -> {'E', 'B'}: 50.0  RULE NOT SELECTED
For rule {'E', 'D'} -> {'C', 'B'}: 66.66666666666666  RULE NOT SELECTED
For rule {'D', 'B'} -> {'E', 'C'}: 66.66666666666666  RULE NOT SELECTED
For rule {'E', 'C'} -> {'D', 'B'}: 66.66666666666666  RULE NOT SELECTED
For rule {'C', 'B'} -> {'E', 'D'}: 66.66666666666666  RULE NOT SELECTED
For rule {'E', 'B'} -> {'D', 'C'}: 100.0  ***RULE SELECTED***
For rule {'E', 'D', 'C'} -> {'B'}: 66.66666666666666  RULE NOT SELECTED
For rule {'D', 'C', 'B'} -> {'E'}: 66.66666666666666  RULE NOT SELECTED
For rule {'E', 'D', 'B'} -> {'C'}: 100.0  ***RULE SELECTED***
For rule {'E', 'C', 'B'} -> {'D'}: 100.0  ***RULE SELECTED***






Department of Computer / TE VI SEM /DWM/Academic Year -2018-2019